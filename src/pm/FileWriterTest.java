package pm;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Vector;


/*
 * Created on 2005. 11. 21
 * File을 지정한 폴더에 Write하면서 생성한다
 * 파일이 있으면 이전 자료를 지우고 없으면 생성한다
 * 
 * Test 하려는 것은 현재 jsp 파일에서는 DB의 조직도를 1 level 을 검색하고 
 * 하위로 내려가 또 조회하는 방식으로 DB를 Select 하는 문장이 많고 시간이 오래걸려
 * 데이터가 생성 되었으면 해당 DB의 자료를 가지고 파일을 생성하는 방식으로 변경한다.
 * 이 구조는 연동데이터가 발생되는 시점이 일정하여 그 시점에 Tree를 변경 가능하기 때문에
 * 생각해 놓은 방안이다. 
 *
 */

/**
 * @author 세진
 */
public class FileWriterTest {
    
    FileWriter fw;  //파일지정
    BufferedWriter bw;	//출력버퍼지정
    PrintWriter outFile;  //출력 객체 지정
    
    public FileWriterTest() throws IOException{
        this( "D:/JavaSource/Test/test.jsp" );
    }

    public FileWriterTest( String fileName ) throws IOException{
        System.out.println("시작");
        
        File file = new File( fileName );
        
        if ( file.exists() ) {
            file.createNewFile();
        }
        
        fw = new FileWriter( fileName );
        bw = new BufferedWriter(fw);
        outFile = new PrintWriter(bw);
        
        writeHeader();
        
        writeBody();
        
        writeFooter();
        
        outFile.close();
        bw.close();
        fw.close();
    }

    public void setWrite( String print ){
        outFile.print( print + " \n" );
        outFile.flush();
    }
    
    public void writeBody(){
        int maxLevel=5;
        
        Vector[] scopeSub = new Vector[maxLevel];
		int[] scopeCnt = new int[maxLevel];
		ScopeInfoBean[] scopeTemp = new ScopeInfoBean[maxLevel];
		Tree tree = new Tree();

		String root = "1000";
		scopeSub[0] = tree.getName( root );
		scopeCnt[0] = scopeSub[0].size();

		for(int i=0;i<scopeCnt[0];i++) {
			scopeTemp[0] = (ScopeInfoBean)scopeSub[0].elementAt(i);

			setWrite("aux0 = insFld(foldersTree, gFld( \"" + scopeTemp[0].getScopeName() + "\"));");

			scopeSub[1] = tree.getName( scopeTemp[0].getScopeIndex() );
			scopeCnt[1] = scopeSub[1].size();
			for(int j=0;j<scopeCnt[1];j++) {
				scopeTemp[1] = (ScopeInfoBean)scopeSub[1].elementAt(j);
				if ( scopeTemp[1].getScopeClass().equals("3") ) {
				    setWrite("insDoc(aux0, gLnk(\"R\", \"" + scopeTemp[1].getScopeName() + "\", \"PM010100_Router.jsp?locationCode=" + scopeTemp[1].getLocationCode() + "&stackModuleNum=" + scopeTemp[1].getStackModuleNum() + "\"))");
				} else {
				    setWrite("aux1 = insFld(aux0,gFld(\""+ scopeTemp[1].getScopeName() + "\",\"\"))");
				}

				scopeSub[2] = tree.getName( scopeTemp[1].getScopeIndex() );
				scopeCnt[2] = scopeSub[2].size();
				for(int k=0;k<scopeCnt[2];k++) {
					scopeTemp[2] = (ScopeInfoBean)scopeSub[2].elementAt(k);	
					if ( scopeTemp[2].getScopeClass().equals("3") ) {
					    setWrite("insDoc(aux1, gLnk(\"R\", \"" + scopeTemp[2].getScopeName() + "\", \"PM010100_Router.jsp?locationCode=" + scopeTemp[2].getLocationCode() + "&stackModuleNum=" + scopeTemp[2].getStackModuleNum() + "\"))");
					} else {
					    setWrite("aux2 = insFld(aux1,gFld(\"" + scopeTemp[2].getScopeName() + "\",\"\"))");
					}

					scopeSub[3] = tree.getName( scopeTemp[2].getScopeIndex() );
					scopeCnt[3] = scopeSub[3].size();
					for(int l=0;l<scopeCnt[3];l++) {
						scopeTemp[3] = (ScopeInfoBean)scopeSub[3].elementAt(l);	
						if ( scopeTemp[2].getScopeClass().equals("3") ) {
						    setWrite("insDoc(aux2, gLnk(\"R\", \"" + scopeTemp[3].getScopeName() + "\", \"PM010100_Router.jsp?locationCode=" + scopeTemp[3].getLocationCode() + "&stackModuleNum=" + scopeTemp[3].getStackModuleNum() + "\"))");
						} else {
						    setWrite("aux3 = insFld(aux2,gFld(\"" + scopeTemp[3].getScopeName() + "\",\"\"))");
						}
						
						scopeSub[4] = tree.getName( scopeTemp[3].getScopeIndex() );
						scopeCnt[4] = scopeSub[4].size();
						for(int m=0;m<scopeCnt[4];m++) {
							scopeTemp[4] = (ScopeInfoBean)scopeSub[4].elementAt(m);
							setWrite("insDoc(aux3, gLnk(\"R\", \"" + scopeTemp[4].getScopeName() + "\", \"PM010100_Router.jsp?locationCode=" + scopeTemp[4].getLocationCode() + "&stackModuleNum=" + scopeTemp[4].getStackModuleNum() + "\"))");
						}
					}
				}
			}
		}
    }
    
    public void writeFooter(){
        setWrite("function searchEquipAlias() {");
        setWrite("	if (this.equip_alias.value == \"\") {");
        setWrite("		alert(\"장비별칭을 입력하세요!\");");
        setWrite("		this.equip_alias.focus();");
        setWrite("		return;");
        setWrite("	}");
        setWrite("	parent.report.router_info.location.replace(\"PM010100_Router.jsp?equip_alias=\"+this.equip_alias.value);");
        setWrite("	}");
        
        setWrite("</script>");
    	setWrite("</head>");
        
        
        setWrite("<body bgColor=#FFFFFF text=\"#000000\" topmargin=\"0\" leftmargin=\"0\" marginwidth=\"0\" marginheight=\"0\">");
        setWrite("	<table width=\"195\" align=\"center\" border='0'>");
        setWrite("	<tr height=3>");
        setWrite("		<td><p></p></td>");
        setWrite("	</tr>");
        setWrite("	<tr>");
        setWrite("		<td>&nbsp;&nbsp;장비별칭 검색</td>");
        setWrite("		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"javascript:searchEquipAlias()\"><img src=\"../images/button/btn_search.gif\" border=\"0\"></a></td>");
        setWrite("	</tr>");
        setWrite("	<tr>");
        setWrite("		<td colspan=\"2\" width=\"100%\" align=center><input type=\"text\" size=\"28\" name=\"equip_alias\"></td>");
        setWrite("	</tr>");
        setWrite("	<tr height=3>");
        setWrite("		<td><p></p></td>");
        setWrite("	</tr>");
        setWrite("	</table>");
        setWrite("	<div id=\"tree\">");
        setWrite("	<script language=\"JavaScript\">");
        setWrite("		initializeDocument();" );
        setWrite("	</script>");
        setWrite("	</div>");
        setWrite("</body>");
        setWrite("</html>");
    }
    
    public void writeHeader(){
        
        setWrite("<%------------------------------------------------------");
        setWrite("- Author(s): centrople");
        setWrite("- Date: 2005.07.08");
        setWrite("- Copyright Notice:");
        setWrite("- @(#)");
        setWrite("- Description: Create package");
        setWrite("------------------------------------------------------%>");
        setWrite("      <%@ page contentType=\"text/html;charset=EUC-KR\"%>");
        setWrite("      <%@ page import=\"java.util.*\"%>");
        setWrite("      <%@ page import=\"common.*\" %>");
        setWrite("      <%@ page import=\"pm.*\"%>");
        setWrite("      <%");
        setWrite("      	request.setCharacterEncoding(\"euc-kr\"); ");
        setWrite("      %>");
        setWrite("      <jsp:useBean id=\"tree\" class=\"pm.Tree\" />");
        setWrite("      <html>");
        setWrite("      <head>");
        setWrite("	<link href=\"../css/style.css\" rel=\"stylesheet\" type=\"text/css\"> ");
        setWrite("	<META NAME=\"GENERATOR\" CONTENT=\"Web Log Suite 2.3\"> ");
        setWrite(" ");
        setWrite("	<!--  ");
        setWrite("	This frameset document includes the Treeview script. ");
        setWrite("	Script found in: http://www.treeview.net ");
        setWrite("	Author: Marcelino Alves Martins ");
        setWrite("	--> ");
        setWrite("	<style> ");
        setWrite("		#tree {width:195; height:93%; overflow:auto; padding:5px; border:0 solid #99CCFF; color: #99CCFF;line-height:15pt;font-size:9pt;} ");
        setWrite("		DIV ");
        setWrite("		{scrollbar-face-color: #FFFFFF; scrollbar-shadow-color: #FDB402; ");
        setWrite("		scrollbar-highlight-color: #FFFFFF; scrollbar-3dlight-color: #FDB402; ");
        setWrite("		scrollbar-darkshadow-color: #FFFFFF; scrollbar-track-color:#FFFFFF;  ");
        setWrite("		scrollbar-arrow-color: #FDB402}DIV ");
        setWrite("	</style> ");
        setWrite(" ");
        setWrite("	<script language=\"JavaScript\"> ");
        setWrite("		function xbDetectBrowser() ");
        setWrite("		{ ");
        setWrite("			var oldOnError = window.onerror; ");
        setWrite("			var element = null; ");
        setWrite("			window.onerror = null; ");
        setWrite("			window.saveNavigator = window.navigator; ");
        setWrite("			navigator.OS    = ''; ");
        setWrite("			navigator.version  = parseFloat(navigator.appVersion); ");
        setWrite("			navigator.org    = ''; ");
        setWrite("			navigator.family  = ''; ");
        setWrite("			var platform; ");
        setWrite("			if (typeof(window.navigator.platform) != 'undefined') ");
        setWrite("			{ ");
        setWrite("				platform = window.navigator.platform.toLowerCase(); ");
        setWrite("				if (platform.indexOf('win') != -1) ");
        setWrite("					navigator.OS = 'win'; ");
        setWrite("				else if (platform.indexOf('mac') != -1) ");
        setWrite("					navigator.OS = 'mac'; ");
        setWrite("				else if (platform.indexOf('unix') != -1 || platform.indexOf('linux') != -1 || platform.indexOf('sun') != -1) ");
        setWrite("					navigator.OS = 'nix'; ");
        setWrite("			} ");
        setWrite("			var i = 0; ");
        setWrite("			var ua = window.navigator.userAgent.toLowerCase(); ");
        setWrite("			if (ua.indexOf('safari') != -1) ");
        setWrite("			{ ");
        setWrite("				i = ua.indexOf('safari'); ");
        setWrite("				navigator.family = 'safari'; ");
        setWrite("				navigator.org = 'safari'; ");
        setWrite("				navigator.version = parseFloat('0' + ua.substr(i+7), 10); ");
        setWrite("			} ");
        setWrite("			else if (ua.indexOf('opera') != -1) ");
        setWrite("			{ ");
        setWrite("				i = ua.indexOf('opera'); ");
        setWrite("				navigator.family  = 'opera'; ");
        setWrite("				navigator.org    = 'opera'; ");
        setWrite("				navigator.version  = parseFloat('0' + ua.substr(i+6), 10); ");
        setWrite("			} ");
        setWrite("			else if ((i = ua.indexOf('msie')) != -1) ");
        setWrite("			{ ");
        setWrite("				navigator.org    = 'microsoft'; ");
        setWrite("				navigator.version  = parseFloat('0' + ua.substr(i+5), 10); ");
        setWrite("				if (navigator.version < 4) ");
        setWrite("					navigator.family = 'ie3'; ");
        setWrite("				else ");
        setWrite("					navigator.family = 'ie4' ");
        setWrite("			} ");
        setWrite("			else if (ua.indexOf('gecko') != -1) ");
        setWrite("			{ ");
        setWrite("				navigator.family = 'gecko'; ");
        setWrite("				var rvStart = ua.indexOf('rv:'); ");
        setWrite("				var rvEnd   = ua.indexOf(')', rvStart); ");
        setWrite("				var rv      = ua.substring(rvStart+3, rvEnd); ");
        setWrite("				var rvParts = rv.split('.'); ");
        setWrite("				var rvValue = 0; ");
        setWrite("				var exp     = 1; ");
        setWrite("				for (var i = 0; i < rvParts.length; i++) ");
        setWrite("				{ ");
        setWrite("					var val = parseInt(rvParts[i]); ");
        setWrite("					rvValue += val / exp; ");
        setWrite("					exp *= 100; ");
        setWrite("				} ");
        setWrite("				navigator.version = rvValue; ");
        setWrite("				if (ua.indexOf('netscape') != -1) ");
        setWrite("					navigator.org = 'netscape'; ");
        setWrite("				else if (ua.indexOf('compuserve') != -1) ");
        setWrite("					navigator.org = 'compuserve'; ");
        setWrite("				else ");
        setWrite("					navigator.org = 'mozilla'; ");
        setWrite("			} ");
        setWrite("			else if ((ua.indexOf('mozilla') !=-1) && (ua.indexOf('spoofer')==-1) && (ua.indexOf('compatible') == -1) && (ua.indexOf('opera')==-1)&& (ua.indexOf('webtv')==-1) && (ua.indexOf('hotjava')==-1)) ");
        setWrite("			{ ");
        setWrite("				var is_major = parseFloat(navigator.appVersion); ");
        setWrite("				if (is_major < 4) ");
        setWrite("					navigator.version = is_major; ");
        setWrite("				else ");
        setWrite("				{ ");
        setWrite("					i = ua.lastIndexOf('/') ");
        setWrite("					navigator.version = parseFloat('0' + ua.substr(i+1), 10); ");
        setWrite("				} ");
        setWrite("				navigator.org = 'netscape'; ");
        setWrite("				navigator.family = 'nn' + parseInt(navigator.appVersion); ");
        setWrite("			} ");
        setWrite("			else if ((i = ua.indexOf('aol')) != -1 ) ");
        setWrite("			{ ");
        setWrite("				navigator.family  = 'aol'; ");
        setWrite("				navigator.org    = 'aol'; ");
        setWrite("				navigator.version  = parseFloat('0' + ua.substr(i+4), 10); ");
        setWrite("			} ");
        setWrite("			else if ((i = ua.indexOf('hotjava')) != -1 ) ");
        setWrite("			{ ");
        setWrite("				navigator.family  = 'hotjava'; ");
        setWrite("				navigator.org    = 'sun'; ");
        setWrite("				navigator.version  = parseFloat(navigator.appVersion); ");
        setWrite("			} ");
        setWrite("			window.onerror = oldOnError; ");
        setWrite("		} ");
        setWrite("		xbDetectBrowser(); ");
        setWrite(" ");
        setWrite("		function Folder(folderDescription, hreference) ");
        setWrite("		{ ");
        setWrite("			this.desc = folderDescription; ");
        setWrite("			this.hreference = hreference; ");
        setWrite("			this.id = -1; ");
        setWrite("			this.navObj = 0; ");
        setWrite("			this.iconImg = 0; ");
        setWrite("			this.nodeImg = 0; ");
        setWrite("			this.isLastNode = 0; ");
        setWrite("			this.iconSrc = ICONPATH + \"folderopen.gif\"; ");
        setWrite("			this.iconSrcClosed = ICONPATH + \"folderclosed.gif\"; ");
        setWrite("			this.children = new Array; ");
        setWrite("			this.nChildren = 0; ");
        setWrite("			this.level = 0; ");
        setWrite("			this.leftSideCoded = \"\"; ");
        setWrite("			this.isLastNode=false; ");
        setWrite("			this.parentObj = null; ");
        setWrite("			this.maySelect=true; ");
        setWrite("			this.prependHTML = \"\" ");
        setWrite("			this.isOpen = false ");
        setWrite("			this.isLastOpenedFolder = false ");
        setWrite("			this.isRendered = 0 ");
        setWrite("			this.initialize = initializeFolder  ");
        setWrite("			this.setState = setStateFolder  ");
        setWrite("			this.addChild = addChild  ");
        setWrite("			this.createIndex = createEntryIndex  ");
        setWrite("			this.escondeBlock = escondeBlock ");
        setWrite("			this.esconde = escondeFolder  ");
        setWrite("			this.folderMstr = folderMstr  ");
        setWrite("			this.renderOb = drawFolder  ");
        setWrite("			this.totalHeight = totalHeight  ");
        setWrite("			this.subEntries = folderSubEntries  ");
        setWrite("			this.linkHTML = linkFolderHTML ");
        setWrite("			this.blockStartHTML = blockStartHTML ");
        setWrite("			this.blockEndHTML = blockEndHTML ");
        setWrite("			this.nodeImageSrc = nodeImageSrc ");
        setWrite("			this.iconImageSrc = iconImageSrc ");
        setWrite("			this.getID = getID ");
        setWrite("			this.forceOpeningOfAncestorFolders = forceOpeningOfAncestorFolders ");
        setWrite("		} ");
        setWrite(" ");
        setWrite("		function initializeFolder(level, lastNode, leftSide)  ");
        setWrite("		{ ");
        setWrite("			var j=0 ");
        setWrite("			var i=0 ");
        setWrite("			nc = this.nChildren ");
        setWrite("			this.createIndex() ");
        setWrite("			this.level = level ");
        setWrite("			this.leftSideCoded = leftSide ");
        setWrite("			if (browserVersion == 0 || STARTALLOPEN==1) ");
        setWrite("				this.isOpen=true; ");
        setWrite("			if (level>0) ");
        setWrite("				if (lastNode) ");
        setWrite("					leftSide = leftSide + \"0\" ");
        setWrite("			else ");
        setWrite("				leftSide = leftSide + \"1\" ");
        setWrite("			this.isLastNode = lastNode ");
        setWrite("			if (nc > 0) ");
        setWrite("			{ ");
        setWrite("				level = level + 1 ");
        setWrite("				for (i=0 ; i < this.nChildren; i++) ");
        setWrite("				{ ");
        setWrite("					if (i == this.nChildren-1) ");
        setWrite("						this.children[i].initialize(level, 1, leftSide) ");
        setWrite("					else ");
        setWrite("						this.children[i].initialize(level, 0, leftSide) ");
        setWrite("				} ");
        setWrite("			} ");
        setWrite("		} ");
        setWrite(" ");
        setWrite("		function drawFolder(insertAtObj)  ");
        setWrite("		{ ");
        setWrite("			var nodeName = \"\" ");
        setWrite("			var auxEv = \"\" ");
        setWrite("			var docW = \"\" ");
        setWrite("			var leftSide = leftSideHTML(this.leftSideCoded) ");
        setWrite("			if (browserVersion > 0) ");
        setWrite("				auxEv = \"<a href='javascript:clickOnNode(\\\"\"+this.getID()+\"\\\")'>\" ");
        setWrite("			else ");
        setWrite("				auxEv = \"<a>\" ");
        setWrite("			nodeName = this.nodeImageSrc() ");
        setWrite("			if (this.level>0) ");
        setWrite("				if (this.isLastNode) ");
        setWrite("					leftSide = leftSide + \"<td valign=top>\" + auxEv + \"<img name='nodeIcon\" + this.id + \"' id='nodeIcon\" + this.id + \"' src='\" + nodeName + \"' width=16 height=22 border=0></a></td>\" ");
        setWrite("				else ");
        setWrite("					leftSide = leftSide + \"<td valign=top background=\" + ICONPATH + \"vertline.gif>\" + auxEv + \"<img name='nodeIcon\" + this.id + \"' id='nodeIcon\" + this.id + \"' src='\" + nodeName + \"' width=16 height=22 border=0></a></td>\" ");
        setWrite("			this.isRendered = 1 ");
        setWrite("			if (browserVersion == 2) { ");
        setWrite("				if (!doc.yPos) ");
        setWrite("					doc.yPos=20 ");
        setWrite("			} ");
        setWrite("			docW = this.blockStartHTML(\"folder\"); ");
        setWrite("			docW = docW + \"<tr>\" + leftSide + \"<td valign=top>\"; ");
        setWrite("			if (USEICONS) ");
        setWrite("			{ ");
        setWrite("				docW = docW + this.linkHTML(false)  ");
        setWrite("				docW = docW + \"<img id='folderIcon\" + this.id + \"' name='folderIcon\" + this.id + \"' src='\" + this.iconImageSrc() + \"' border=0></a>\" ");
        setWrite("			} ");
        setWrite("			else ");
        setWrite("			{ ");
        setWrite("				if (this.prependHTML == \"\") ");
        setWrite("					docW = docW + \"<img src=\" + ICONPATH + \"blank.gif height=2 width=2>\" ");
        setWrite("			} ");
        setWrite("			if (WRAPTEXT) ");
        setWrite("				docW = docW + \"</td>\"+this.prependHTML+\"<td valign=middle width=100%>\" ");
        setWrite("			else ");
        setWrite("				docW = docW + \"</td>\"+this.prependHTML+\"<td valign=middle nowrap width=100%>\" ");
        setWrite("			if (USETEXTLINKS)  ");
        setWrite("			{ ");
        setWrite("				docW = docW + this.linkHTML(true)  ");
        setWrite("				docW = docW + this.desc + \"</a>\" ");
        setWrite("			} ");
        setWrite("			else  ");
        setWrite("				docW = docW + this.desc ");
        setWrite("			docW = docW + \"</td>\" ");
        setWrite(" ");
        setWrite("			docW = docW + this.blockEndHTML() ");
        setWrite(" ");
        setWrite("			if (insertAtObj == null) ");
        setWrite("			{ ");
        setWrite("				if (supportsDeferral) { ");
        setWrite("					doc.write(\"<div id=domRoot></div>\") ");
        setWrite("					insertAtObj = getElById(\"domRoot\") ");
        setWrite("					insertAtObj.insertAdjacentHTML(\"beforeEnd\", docW) ");
        setWrite("				} ");
        setWrite("				else ");
        setWrite("					doc.write(docW) ");
        setWrite("			} ");
        setWrite("			else ");
        setWrite("				insertAtObj.insertAdjacentHTML(\"afterEnd\", docW) ");
        setWrite("			if (browserVersion == 2)  ");
        setWrite("			{ ");
        setWrite("				this.navObj = doc.layers[\"folder\"+this.id]  ");
        setWrite("				if (USEICONS) ");
        setWrite("					this.iconImg = this.navObj.document.images[\"folderIcon\"+this.id]  ");
        setWrite("				this.nodeImg = this.navObj.document.images[\"nodeIcon\"+this.id]  ");
        setWrite("				doc.yPos=doc.yPos+this.navObj.clip.height  ");
        setWrite("			} ");
        setWrite("			else if (browserVersion != 0) ");
        setWrite("			{ ");
        setWrite("				this.navObj = getElById(\"folder\"+this.id) ");
        setWrite("				if (USEICONS) ");
        setWrite("					this.iconImg = getElById(\"folderIcon\"+this.id)  ");
        setWrite("				this.nodeImg = getElById(\"nodeIcon\"+this.id) ");
        setWrite("			} ");
        setWrite("		} ");
        setWrite("		  ");
        setWrite("		function setStateFolder(isOpen)  ");
        setWrite("		{ ");
        setWrite("			var subEntries  ");
        setWrite("			var totalHeight  ");
        setWrite("			var fIt = 0  ");
        setWrite("			var i=0  ");
        setWrite("			var currentOpen ");
        setWrite("			if (isOpen == this.isOpen)  ");
        setWrite("				return  ");
        setWrite("			if (browserVersion == 2)	 ");
        setWrite("			{ ");
        setWrite("				totalHeight = 0  ");
        setWrite("				for (i=0; i < this.nChildren; i++)  ");
        setWrite("					totalHeight = totalHeight + this.children[i].navObj.clip.height  ");
        setWrite("					subEntries = this.subEntries()  ");
        setWrite("				if (this.isOpen)  ");
        setWrite("					totalHeight = 0 - totalHeight  ");
        setWrite("				for (fIt = this.id + subEntries + 1; fIt < nEntries; fIt++)  ");
        setWrite("					indexOfEntries[fIt].navObj.moveBy(0, totalHeight)  ");
        setWrite("			}	 ");
        setWrite("			this.isOpen = isOpen; ");
        setWrite(" ");
        setWrite("			if (this.getID()!=foldersTree.getID() && PERSERVESTATE && !this.isOpen) ");
        setWrite("			{ ");
        setWrite("				 currentOpen = GetCookie(\"clickedFolder\") ");
        setWrite("				 if (currentOpen != null) { ");
        setWrite("					 currentOpen = currentOpen.replace(this.getID()+cookieCutter, \"\") ");
        setWrite("					 SetCookie(\"clickedFolder\", currentOpen) ");
        setWrite("				 } ");
        setWrite("			} ");
        setWrite("			 ");
        setWrite("			if (!this.isOpen && this.isLastOpenedfolder) ");
        setWrite("			{ ");
        setWrite("				lastOpenedFolder = null; ");
        setWrite("				this.isLastOpenedfolder = false; ");
        setWrite("			} ");
        setWrite("			propagateChangesInState(this)  ");
        setWrite("		} ");
        setWrite("		  ");
        setWrite("		function propagateChangesInState(folder)  ");
        setWrite("		{	  ");
        setWrite("			var i=0  ");
        setWrite("			if (folder.nChildren > 0 && folder.level>0) ");
        setWrite("				folder.nodeImg.src = folder.nodeImageSrc() ");
        setWrite("			if (USEICONS) ");
        setWrite("				folder.iconImg.src = folder.iconImageSrc() ");
        setWrite("			for (i=folder.nChildren-1; i>=0; i--)  ");
        setWrite("				if (folder.isOpen)  ");
        setWrite("					folder.children[i].folderMstr(folder.navObj) ");
        setWrite("				else  ");
        setWrite("					folder.children[i].esconde()  ");
        setWrite("		} ");
        setWrite(" ");
        setWrite("		function escondeFolder()  ");
        setWrite("		{ ");
        setWrite("			this.escondeBlock() ");
        setWrite("			this.setState(0)  ");
        setWrite("		} ");
        setWrite(" ");
        setWrite("		function linkFolderHTML(isTextLink)  ");
        setWrite("		{ ");
        setWrite("			var docW = \"\"; ");
        setWrite("			if (this.hreference)  ");
        setWrite("			{ ");
        setWrite("				if (USEFRAMES) ");
        setWrite("					docW = docW + \"<a href='\" + this.hreference + \"' TARGET=\\\"router_info\\\" \" ");
        setWrite("				else ");
        setWrite("					docW = docW + \"<a href='\" + this.hreference + \"' TARGET=_top \" ");
        setWrite("				if (isTextLink) ");
        setWrite("					docW += \"id=\\\"itemTextLink\"+this.id+\"\\\" \"; ");
        setWrite("				if (browserVersion > 0) ");
        setWrite("					docW = docW + \"onClick='javascript:clickOnFolder(\\\"\"+this.getID()+\"\\\")'\" ");
        setWrite("				docW = docW + \">\" ");
        setWrite("			} ");
        setWrite("			else ");
        setWrite("				docW = docW + \"<a>\" ");
        setWrite("			return docW; ");
        setWrite("		} ");
        setWrite(" ");
        setWrite("		function addChild(childNode)  ");
        setWrite("		{ ");
        setWrite("			this.children[this.nChildren] = childNode ");
        setWrite("			childNode.parentObj = this ");
        setWrite("			this.nChildren++ ");
        setWrite("			return childNode ");
        setWrite("		} ");
        setWrite(" ");
        setWrite("		function folderSubEntries() ");
        setWrite("		{ ");
        setWrite("			var i = 0 ");
        setWrite("			var se = this.nChildren ");
        setWrite("			for (i=0; i < this.nChildren; i++) { ");
        setWrite("				if (this.children[i].children) ");
        setWrite("					se = se + this.children[i].subEntries() ");
        setWrite("			} ");
        setWrite("			return se ");
        setWrite("		} ");
        setWrite(" ");
        setWrite("		function nodeImageSrc() { ");
        setWrite("			var srcStr = \"\"; ");
        setWrite("			if (this.isLastNode) ");
        setWrite("			{ ");
        setWrite("				if (this.nChildren == 0) ");
        setWrite("					srcStr = ICONPATH + \"lastnode.gif\" ");
        setWrite("				else ");
        setWrite("					if (this.isOpen) ");
        setWrite("						srcStr = ICONPATH + \"mlastnode.gif\" ");
        setWrite("					else ");
        setWrite("						srcStr = ICONPATH + \"plastnode.gif\" ");
        setWrite("			} ");
        setWrite("			else ");
        setWrite("			{ ");
        setWrite("				if (this.nChildren == 0) ");
        setWrite("					srcStr = ICONPATH + \"node.gif\" ");
        setWrite("				else ");
        setWrite("					if (this.isOpen) ");
        setWrite("						srcStr = ICONPATH + \"mnode.gif\" ");
        setWrite("					else ");
        setWrite("						srcStr = ICONPATH + \"pnode.gif\" ");
        setWrite("			} ");
        setWrite("			return srcStr; ");
        setWrite("		} ");
        setWrite(" ");
        setWrite("		function iconImageSrc() { ");
        setWrite("			if (this.isOpen) ");
        setWrite("				return(this.iconSrc) ");
        setWrite("			else ");
        setWrite("				return(this.iconSrcClosed) ");
        setWrite("		} ");
        setWrite(" ");
        setWrite("		function Item(itemDescription, itemLink, target) ");
        setWrite("		{ ");
        setWrite("			this.desc = itemDescription ");
        setWrite("			this.link = itemLink ");
        setWrite("			this.id = -1 ");
        setWrite("			this.navObj = 0 ");
        setWrite("			this.iconImg = 0 ");
        setWrite("			this.iconSrc = ICONPATH + \"doc.gif\" ");
        setWrite("			this.isRendered = 0 ");
        setWrite("			this.isLastNode = false ");
        setWrite("			this.level = 0 ");
        setWrite("			this.leftSideCoded = \"\" ");
        setWrite("			this.nChildren = 0 ");
        setWrite("			this.target = target ");
        setWrite("			this.parentObj = null ");
        setWrite("			this.maySelect=true ");
        setWrite("			this.prependHTML = \"\" ");
        setWrite("			this.initialize = initializeItem ");
        setWrite("			this.createIndex = createEntryIndex ");
        setWrite("			this.escondeBlock = escondeBlock ");
        setWrite("			this.esconde = escondeBlock ");
        setWrite("			this.folderMstr = folderMstr ");
        setWrite("			this.renderOb = drawItem ");
        setWrite("			this.totalHeight = totalHeight ");
        setWrite("			this.blockStartHTML = blockStartHTML ");
        setWrite("			this.blockEndHTML = blockEndHTML ");
        setWrite("			this.getID = getID ");
        setWrite("			this.forceOpeningOfAncestorFolders = forceOpeningOfAncestorFolders ");
        setWrite("		} ");
        setWrite(" ");
        setWrite("		function initializeItem(level, lastNode, leftSide) ");
        setWrite("		{ ");
        setWrite("			this.createIndex() ");
        setWrite("			this.level = level ");
        setWrite("			this.leftSideCoded = leftSide ");
        setWrite("			this.isLastNode = lastNode ");
        setWrite("		} ");
        setWrite(" ");
        setWrite("		function drawItem(insertAtObj) ");
        setWrite("		{ ");
        setWrite("			var leftSide = leftSideHTML(this.leftSideCoded) ");
        setWrite("			var docW = \"\" ");
        setWrite("			var fullLink = \"href=\\\"\"+this.link+\"\\\" target=\\\"\"+this.target+\"\\\" onClick=\\\"clickOnLink('\"+this.getID()+\"\', '\"+this.link+\"','\"+this.target+\"');return false;\\\"\"; ");
        setWrite("			this.isRendered = 1 ");
        setWrite("			if (this.level>0) ");
        setWrite("				if (this.isLastNode) ");
        setWrite("					leftSide = leftSide + \"<td valign=top><img src='\" + ICONPATH + \"lastnode.gif' width=16 height=22></td>\" ");
        setWrite("				else ");
        setWrite("					leftSide = leftSide + \"<td valign=top background=\" + ICONPATH + \"vertline.gif><img src='\" + ICONPATH + \"node.gif' width=16 height=22></td>\" ");
        setWrite("			docW = docW + this.blockStartHTML(\"item\") ");
        setWrite("			docW = docW + \"<tr>\" + leftSide + \"<td valign=top>\" ");
        setWrite("			if (USEICONS) ");
        setWrite("				docW = docW + \"<a \" + fullLink	+ \" id=\\\"itemIconLink\"+this.id+\"\\\">\" + \"<img id='itemIcon\"+this.id+\"' \" + \"src='\"+this.iconSrc+\"' border=0>\" + \"</a>\" ");
        setWrite("			else if (this.prependHTML == \"\") ");
        setWrite("				docW = docW + \"<img src=\" + ICONPATH + \"blank.gif height=2 width=3>\" ");
        setWrite("			if (WRAPTEXT) ");
        setWrite("				docW = docW + \"</td>\"+this.prependHTML+\"<td valign=middle width=100%>\" ");
        setWrite("			else ");
        setWrite("				docW = docW + \"</td>\"+this.prependHTML+\"<td valign=middle nowrap width=100%>\" ");
        setWrite("			if (USETEXTLINKS) ");
        setWrite("				docW = docW + \"<a \" + fullLink + \" id=\\\"itemTextLink\"+this.id+\"\\\">\" + this.desc + \"</a>\" ");
        setWrite("			else ");
        setWrite("				docW = docW + this.desc ");
        setWrite("			docW = docW + \"</td>\" ");
        setWrite("			docW = docW + this.blockEndHTML() ");
        setWrite("			if (insertAtObj == null) ");
        setWrite("				doc.write(docW) ");
        setWrite("			else ");
        setWrite("				insertAtObj.insertAdjacentHTML(\"afterEnd\", docW) ");
        setWrite("			if (browserVersion == 2) { ");
        setWrite("				this.navObj = doc.layers[\"item\"+this.id] ");
        setWrite("				if (USEICONS) ");
        setWrite("					this.iconImg = this.navObj.document.images[\"itemIcon\"+this.id] ");
        setWrite("				doc.yPos=doc.yPos+this.navObj.clip.height ");
        setWrite("			} else if (browserVersion != 0) { ");
        setWrite("				this.navObj = getElById(\"item\"+this.id) ");
        setWrite("				if (USEICONS) ");
        setWrite("					this.iconImg = getElById(\"itemIcon\"+this.id) ");
        setWrite("			} ");
        setWrite("		} ");
        setWrite(" ");
        setWrite("		function forceOpeningOfAncestorFolders() { ");
        setWrite("			if (this.parentObj == null || this.parentObj.isOpen) ");
        setWrite("				return ");
        setWrite("			else { ");
        setWrite("				this.parentObj.forceOpeningOfAncestorFolders() ");
        setWrite("				clickOnNodeObj(this.parentObj) ");
        setWrite("			} ");
        setWrite("		} ");
        setWrite(" ");
        setWrite("		function escondeBlock()  ");
        setWrite("		{ ");
        setWrite("			if (browserVersion == 1 || browserVersion == 3) { ");
        setWrite("				if (this.navObj.style.display == \"none\") ");
        setWrite("					return ");
        setWrite("				this.navObj.style.display = \"none\" ");
        setWrite("			} else { ");
        setWrite("				if (this.navObj.visibility == \"hidden\") ");
        setWrite("					return ");
        setWrite("				this.navObj.visibility = \"hidden\" ");
        setWrite("			} ");
        setWrite("		} ");
        setWrite(" ");
        setWrite("		function folderMstr(domObj) ");
        setWrite("		{ ");
        setWrite("			if (!this.isRendered) ");
        setWrite("				 this.renderOb(domObj) ");
        setWrite("			else ");
        setWrite("				if (browserVersion == 1 || browserVersion == 3) ");
        setWrite("					this.navObj.style.display = \"block\" ");
        setWrite("				else ");
        setWrite("					this.navObj.visibility = \"show\" ");
        setWrite("		} ");
        setWrite(" ");
        setWrite("		function blockStartHTML(idprefix) { ");
        setWrite("			var idParam = \"id='\" + idprefix + this.id + \"'\" ");
        setWrite("			var docW = \"\" ");
        setWrite("			if (browserVersion == 2) ");
        setWrite("				docW = \"<layer \"+ idParam + \" top=\" + doc.yPos + \" visibility=show>\" ");
        setWrite("			else if (browserVersion != 0) ");
        setWrite("				docW = \"<div \" + idParam + \" style='display:block; position:block;'>\" ");
        setWrite("			docW = docW + \"<table border=0 cellspacing=0 cellpadding=0 width=100% >\" ");
        setWrite("			return docW ");
        setWrite("		} ");
        setWrite(" ");
        setWrite("		function blockEndHTML() { ");
        setWrite("			var docW = \"\" ");
        setWrite("			docW = \"</table>\" ");
        setWrite("			if (browserVersion == 2) ");
        setWrite("				docW = docW + \"</layer>\" ");
        setWrite("			else if (browserVersion != 0) ");
        setWrite("				docW = docW + \"</div>\" ");
        setWrite("			return docW ");
        setWrite("		} ");
        setWrite(" ");
        setWrite("		function createEntryIndex()  ");
        setWrite("		{ ");
        setWrite("			this.id = nEntries ");
        setWrite("			indexOfEntries[nEntries] = this ");
        setWrite("			nEntries++ ");
        setWrite("		} ");
        setWrite(" ");
        setWrite("		function totalHeight() ");
        setWrite("		{ ");
        setWrite("			var h = this.navObj.clip.height ");
        setWrite("			var i = 0 ");
        setWrite("			if (this.isOpen) ");
        setWrite("				for (i=0 ; i < this.nChildren; i++) ");
        setWrite("					h = h + this.children[i].totalHeight() ");
        setWrite("			return h ");
        setWrite("		} ");
        setWrite(" ");
        setWrite("		function leftSideHTML(leftSideCoded) { ");
        setWrite("			var i; ");
        setWrite("			var retStr = \"\"; ");
        setWrite("			for (i=0; i<leftSideCoded.length; i++) ");
        setWrite("			{ ");
        setWrite("				if (leftSideCoded.charAt(i) == \"1\") ");
        setWrite("					retStr = retStr + \"<td valign=top background=\" + ICONPATH + \"vertline.gif><img src='\" + ICONPATH + \"vertline.gif' width=16 height=22></td>\" ");
        setWrite("				if (leftSideCoded.charAt(i) == \"0\") ");
        setWrite("					retStr = retStr + \"<td valign=top><img src='\" + ICONPATH + \"blank.gif' width=16 height=22></td>\" ");
        setWrite("			} ");
        setWrite("			return retStr ");
        setWrite("		} ");
        setWrite(" ");
        setWrite("		function getID() ");
        setWrite("		{ ");
        setWrite("			if (typeof this.xID != \"undefined\") ");
        setWrite("				return this.xID ");
        setWrite("			else ");
        setWrite("				return this.id ");
        setWrite("		} ");
        setWrite(" ");
        setWrite("		function clickOnFolder(folderId) ");
        setWrite("		{ ");
        setWrite("			var clicked = findObj(folderId) ");
        setWrite("			if (!clicked.isOpen) ");
        setWrite("				clickOnNodeObj(clicked)  ");
        setWrite("			if (lastOpenedFolder != null && lastOpenedFolder != folderId) ");
        setWrite("				clickOnNode(lastOpenedFolder); ");
        setWrite("			if (clicked.nChildren==0) { ");
        setWrite("				lastOpenedFolder = folderId; ");
        setWrite("				clicked.isLastOpenedfolder = true ");
        setWrite("			} ");
        setWrite("			if (isLinked(clicked.hreference)) ");
        setWrite("					highlightObjLink(clicked); ");
        setWrite("		} ");
        setWrite(" ");
        setWrite("		function clickOnNode(folderId)  ");
        setWrite("		{ ");
        setWrite("			clickOnNodeObj(findObj(folderId)) ");
        setWrite("		} ");
        setWrite(" ");
        setWrite("		function clickOnNodeObj(folderObj)  ");
        setWrite("		{ ");
        setWrite("			var state = 0 ");
        setWrite("			var currentOpen ");
        setWrite("			state = folderObj.isOpen ");
        setWrite("			folderObj.setState(!state) ");
        setWrite("			if (folderObj.id!=foldersTree.id && PERSERVESTATE) ");
        setWrite("			{ ");
        setWrite("				currentOpen = GetCookie(\"clickedFolder\") ");
        setWrite("				if (currentOpen == null) ");
        setWrite("					currentOpen = \"\" ");
        setWrite("				if (!folderObj.isOpen) ");
        setWrite("				{ ");
        setWrite("					currentOpen = currentOpen.replace(folderObj.getID()+cookieCutter, \"\") ");
        setWrite("					SetCookie(\"clickedFolder\", currentOpen) ");
        setWrite("				} ");
        setWrite("				else ");
        setWrite("					SetCookie(\"clickedFolder\", currentOpen+folderObj.getID()+cookieCutter) ");
        setWrite("			} ");
        setWrite("		} ");
        setWrite(" ");
        setWrite("		function clickOnLink(clickedId, target, windowName) { ");
        setWrite("			highlightObjLink(findObj(clickedId)); ");
        setWrite("			if (isLinked(target)) ");
        setWrite("				window.open(target,windowName); ");
        setWrite("		} ");
        setWrite(" ");
        setWrite("		function findObj(id) ");
        setWrite("		{ ");
        setWrite("			var i=0; ");
        setWrite("			var nodeObj; ");
        setWrite("			if (typeof foldersTree.xID != \"undefined\") { ");
        setWrite("				nodeObj = indexOfEntries[i]; ");
        setWrite("				for(i=0;i<nEntries&&indexOfEntries[i].xID!=id;i++) ");
        setWrite("					; ");
        setWrite("				id = i ");
        setWrite("			} ");
        setWrite("			if (id >= nEntries) ");
        setWrite("				return null; ");
        setWrite("			else ");
        setWrite("				return indexOfEntries[id]; ");
        setWrite("		} ");
        setWrite(" ");
        setWrite("		function isLinked(hrefText) { ");
        setWrite("			var result = true; ");
        setWrite("			result = (result && hrefText !=null); ");
        setWrite("			result = (result && hrefText != ''); ");
        setWrite("			result = (result && hrefText.indexOf('undefined') < 0); ");
        setWrite("			result = (result && hrefText.indexOf('parent.op') < 0); ");
        setWrite("			return result; ");
        setWrite("		} ");
        setWrite(" ");
        setWrite("		function highlightObjLink(nodeObj) { ");
        setWrite("			if (!HIGHLIGHT || nodeObj==null || nodeObj.maySelect==false) ");
        setWrite("				return; ");
        setWrite("			if (browserVersion == 1 || browserVersion == 3) { ");
        setWrite("				var clickedDOMObj = getElById('itemTextLink'+nodeObj.id); ");
        setWrite("				if (clickedDOMObj != null) { ");
        setWrite("					if (lastClicked != null) { ");
        setWrite("						var prevClickedDOMObj = getElById('itemTextLink'+lastClicked.id); ");
        setWrite("						prevClickedDOMObj.style.color=lastClickedColor; ");
        setWrite("						prevClickedDOMObj.style.backgroundColor=lastClickedBgColor; ");
        setWrite("					} ");
        setWrite("					lastClickedColor		= clickedDOMObj.style.color; ");
        setWrite("					lastClickedBgColor	= clickedDOMObj.style.backgroundColor; ");
        setWrite("					clickedDOMObj.style.color=HIGHLIGHT_COLOR; ");
        setWrite("					clickedDOMObj.style.backgroundColor=HIGHLIGHT_BG; ");
        setWrite("				} ");
        setWrite("			} ");
        setWrite("			lastClicked = nodeObj; ");
        setWrite("			if (PERSERVESTATE) ");
        setWrite("				SetCookie('highlightedTreeviewLink', nodeObj.getID()); ");
        setWrite("		} ");
        setWrite(" ");
        setWrite("		function gFld(description, hreference) ");
        setWrite("		{ ");
        setWrite("			folder = new Folder(description, hreference); ");
        setWrite("			return folder; ");
        setWrite("		} ");
        setWrite(" ");
        setWrite("		function gLnk(optionFlags, description, linkData) ");
        setWrite("		{ ");
        setWrite("			var fullLink = \"\"; ");
        setWrite("			var targetFlag = \"\"; ");
        setWrite("			var target = \"\"; ");
        setWrite("			var protocolFlag = \"\"; ");
        setWrite("			var protocol = \"\"; ");
        setWrite("			if (optionFlags>=0) ");
        setWrite("				return oldGLnk(optionFlags, description, linkData) ");
        setWrite("			targetFlag = optionFlags.charAt(0) ");
        setWrite("			if (targetFlag==\"B\") ");
        setWrite("				target = \"_blank\" ");
        setWrite("			if (targetFlag==\"P\") ");
        setWrite("				target = \"_parent\" ");
        setWrite("			if (targetFlag==\"R\") ");
        setWrite("				target = \"router_info\" ");
        setWrite("			if (targetFlag==\"S\") ");
        setWrite("				target = \"_self\" ");
        setWrite("			if (targetFlag==\"T\") ");
        setWrite("				target = \"_top\" ");
        setWrite("			if (optionFlags.length > 1) { ");
        setWrite("				protocolFlag = optionFlags.charAt(1) ");
        setWrite("				if (protocolFlag==\"h\") ");
        setWrite("					protocol = \"http://\" ");
        setWrite("				if (protocolFlag==\"s\") ");
        setWrite("					protocol = \"https://\" ");
        setWrite("				if (protocolFlag==\"f\") ");
        setWrite("					protocol = \"ftp://\" ");
        setWrite("				if (protocolFlag==\"m\") ");
        setWrite("					protocol = \"mailto:\" ");
        setWrite("			} ");
        setWrite("			fullLink = \"'\" + protocol + linkData + \"' target=\" + target ");
        setWrite("			linkItem = new Item(description, protocol+linkData, target) ");
        setWrite("			return linkItem ");
        setWrite("		} ");
        setWrite(" ");
        setWrite("		function oldGLnk(target, description, linkData) ");
        setWrite("		{ ");
        setWrite("			var fullLink = \"\"; ");
        setWrite("			if (USEFRAMES) ");
        setWrite("			{ ");
        setWrite("				if (target==0)  ");
        setWrite("				{ ");
        setWrite("					fullLink = \"'\"+linkData+\"' target=\\\"router_info\\\"\"  ");
        setWrite("				} ");
        setWrite("				else  ");
        setWrite("				{ ");
        setWrite("					if (target==1) ");
        setWrite("						 fullLink = \"'http://\"+linkData+\"' target=_blank\" ");
        setWrite("					else ");
        setWrite("						if (target==2) ");
        setWrite("							fullLink = \"'http://\"+linkData+\"' target=\\\"router_info\\\"\" ");
        setWrite("						else ");
        setWrite("							fullLink = linkData+\" target=\\\"_top\\\"\" ");
        setWrite("				} ");
        setWrite("			} ");
        setWrite("			else ");
        setWrite("			{ ");
        setWrite("				if (target==0) ");
        setWrite("					fullLink = \"'\"+linkData+\"' target=_top\" ");
        setWrite("				else ");
        setWrite("				{ ");
        setWrite("					if (target==1) ");
        setWrite("						 fullLink = \"'http://\"+linkData+\"' target=_blank\" ");
        setWrite("					else ");
        setWrite("						 fullLink = \"'http://\"+linkData+\"' target=_top\" ");
        setWrite("				} ");
        setWrite("			} ");
        setWrite("			linkItem = new Item(description, fullLink) ");
        setWrite("			return linkItem ");
        setWrite("		} ");
        setWrite(" ");
        setWrite("		function insFld(parentFolder, childFolder) ");
        setWrite("		{ ");
        setWrite("			return parentFolder.addChild(childFolder) ");
        setWrite("		} ");
        setWrite(" ");
        setWrite("		function insDoc(parentFolder, document) ");
        setWrite("		{ ");
        setWrite("			return parentFolder.addChild(document) ");
        setWrite("		} ");
        setWrite(" ");
        setWrite("		function preLoadIcons() { ");
        setWrite("			var auxImg ");
        setWrite("			auxImg = new Image(); ");
        setWrite("			auxImg.src = ICONPATH + \"vertline.gif\"; ");
        setWrite("			auxImg.src = ICONPATH + \"mlastnode.gif\"; ");
        setWrite("			auxImg.src = ICONPATH + \"mnode.gif\"; ");
        setWrite("			auxImg.src = ICONPATH + \"plastnode.gif\"; ");
        setWrite("			auxImg.src = ICONPATH + \"pnode.gif\"; ");
        setWrite("			auxImg.src = ICONPATH + \"blank.gif\"; ");
        setWrite("			auxImg.src = ICONPATH + \"lastnode.gif\"; ");
        setWrite("			auxImg.src = ICONPATH + \"node.gif\"; ");
        setWrite("			auxImg.src = ICONPATH + \"folderclosed.gif\"; ");
        setWrite("			auxImg.src = ICONPATH + \"folderopen.gif\"; ");
        setWrite("			auxImg.src = ICONPATH + \"doc.gif\"; ");
        setWrite("		} ");
        setWrite(" ");
        setWrite("		function setInitialLayout() { ");
        setWrite("			if (browserVersion > 0 && !STARTALLOPEN) ");
        setWrite("				clickOnNodeObj(foldersTree); ");
        setWrite("			if (!STARTALLOPEN && (browserVersion > 0) && PERSERVESTATE) ");
        setWrite("				PersistentFolderOpening(); ");
        setWrite("		} ");
        setWrite(" ");
        setWrite("		function renderAllTree(nodeObj, parent) { ");
        setWrite("			var i=0; ");
        setWrite("			nodeObj.renderOb(parent) ");
        setWrite("			if (supportsDeferral) ");
        setWrite("				for (i=nodeObj.nChildren-1; i>=0; i--) ");
        setWrite("					renderAllTree(nodeObj.children[i], nodeObj.navObj) ");
        setWrite("			else ");
        setWrite("				for (i=0 ; i < nodeObj.nChildren; i++) ");
        setWrite("					renderAllTree(nodeObj.children[i], null) ");
        setWrite("		} ");
        setWrite(" ");
        setWrite("		function hideWholeTree(nodeObj, hideThisOne, nodeObjMove) { ");
        setWrite("			var i=0; ");
        setWrite("			var heightContained=0; ");
        setWrite("			var childrenMove=nodeObjMove; ");
        setWrite("			if (hideThisOne) ");
        setWrite("				nodeObj.escondeBlock() ");
        setWrite("			if (browserVersion == 2) ");
        setWrite("				nodeObj.navObj.moveBy(0, 0-nodeObjMove) ");
        setWrite("			for (i=0 ; i < nodeObj.nChildren; i++) { ");
        setWrite("				heightContainedInChild = hideWholeTree(nodeObj.children[i], true, childrenMove) ");
        setWrite("				if (browserVersion == 2) { ");
        setWrite("					heightContained = heightContained + heightContainedInChild + nodeObj.children[i].navObj.clip.height ");
        setWrite("					childrenMove = childrenMove + heightContainedInChild ");
        setWrite("				} ");
        setWrite("			} ");
        setWrite("			return heightContained; ");
        setWrite("		} ");
        setWrite(" ");
        setWrite("		if(typeof HTMLElement!=\"undefined\" && !HTMLElement.prototype.insertAdjacentElement) { ");
        setWrite("			HTMLElement.prototype.insertAdjacentElement = function (where,parsedNode) ");
        setWrite("			{ ");
        setWrite("				switch (where) { ");
        setWrite("				case 'beforeBegin': ");
        setWrite("					this.parentNode.insertBefore(parsedNode,this) ");
        setWrite("					break; ");
        setWrite("				case 'afterBegin': ");
        setWrite("					this.insertBefore(parsedNode,this.firstChild); ");
        setWrite("					break; ");
        setWrite("				case 'beforeEnd': ");
        setWrite("					this.appendChild(parsedNode); ");
        setWrite("					break; ");
        setWrite("				case 'afterEnd': ");
        setWrite("					if (this.nextSibling) ");
        setWrite("						this.parentNode.insertBefore(parsedNode,this.nextSibling); ");
        setWrite("					else this.parentNode.appendChild(parsedNode); ");
        setWrite("					break; ");
        setWrite("				} ");
        setWrite("			} ");
        setWrite("			HTMLElement.prototype.insertAdjacentHTML = function(where,htmlStr) ");
        setWrite("			{ ");
        setWrite("				var r = this.ownerDocument.createRange(); ");
        setWrite("				r.setStartBefore(this); ");
        setWrite("				var parsedHTML = r.createContextualFragment(htmlStr); ");
        setWrite("				this.insertAdjacentElement(where,parsedHTML) ");
        setWrite("			} ");
        setWrite("		} ");
        setWrite(" ");
        setWrite("		function getElById(idVal) { ");
        setWrite("			if (document.getElementById != null) ");
        setWrite("				return document.getElementById(idVal) ");
        setWrite("			if (document.all != null) ");
        setWrite("				return document.all[idVal] ");
        setWrite("			alert(\"Problem getting element by id\") ");
        setWrite("			return null ");
        setWrite("		} ");
        setWrite(" ");
        setWrite("		function PersistentFolderOpening() ");
        setWrite("		{ ");
        setWrite("			var stateInCookie; ");
        setWrite("			var fldStr=\"\" ");
        setWrite("			var fldArr ");
        setWrite("			var fldPos=0 ");
        setWrite("			var id ");
        setWrite("			var nodeObj ");
        setWrite("			stateInCookie = GetCookie(\"clickedFolder\"); ");
        setWrite("			SetCookie('clickedFolder', \"\") ");
        setWrite("			if(stateInCookie!=null) ");
        setWrite("			{ ");
        setWrite("				fldArr = stateInCookie.split(cookieCutter) ");
        setWrite("				for (fldPos=0; fldPos<fldArr.length; fldPos++) ");
        setWrite("				{ ");
        setWrite("					fldStr=fldArr[fldPos] ");
        setWrite("					if (fldStr != \"\") { ");
        setWrite("						nodeObj = findObj(fldStr) ");
        setWrite("						if (nodeObj!=null) ");
        setWrite("							if (nodeObj.setState) { ");
        setWrite("								nodeObj.forceOpeningOfAncestorFolders() ");
        setWrite("								clickOnNodeObj(nodeObj); ");
        setWrite("							} ");
        setWrite("							else ");
        setWrite("								alert(\"Internal id is not pointing to a folder anymore. Consider using external IDs\") ");
        setWrite("					} ");
        setWrite("				} ");
        setWrite("			} ");
        setWrite("		} ");
        setWrite(" ");
        setWrite("		function storeAllNodesInClickCookie(treeNodeObj) ");
        setWrite("		{ ");
        setWrite("			var currentOpen ");
        setWrite("			var i = 0 ");
        setWrite("			if (typeof treeNodeObj.setState != \"undefined\") ");
        setWrite("			{ ");
        setWrite("				currentOpen = GetCookie(\"clickedFolder\") ");
        setWrite("				if (currentOpen == null) ");
        setWrite("					currentOpen = \"\" ");
        setWrite("				if (treeNodeObj.getID() != foldersTree.getID()) ");
        setWrite("					SetCookie(\"clickedFolder\", currentOpen+treeNodeObj.getID()+cookieCutter) ");
        setWrite("				for (i=0; i < treeNodeObj.nChildren; i++) ");
        setWrite("					storeAllNodesInClickCookie(treeNodeObj.children[i]) ");
        setWrite("			} ");
        setWrite("		} ");
        setWrite(" ");
        setWrite("		function CookieBranding(name) { ");
        setWrite("			if (typeof foldersTree.treeID != \"undefined\") ");
        setWrite("				return name+foldersTree.treeID ");
        setWrite("			else ");
        setWrite("				return name ");
        setWrite("		} ");
        setWrite(" ");
        setWrite("		function GetCookie(name) ");
        setWrite("		{ ");
        setWrite("			name = CookieBranding(name) ");
        setWrite("			var arg = name + \"=\"; ");
        setWrite("			var alen = arg.length; ");
        setWrite("			var clen = document.cookie.length; ");
        setWrite("			var i = 0; ");
        setWrite("			while (i < clen) { ");
        setWrite("				var j = i + alen; ");
        setWrite("				if (document.cookie.substring(i, j) == arg) ");
        setWrite("					return getCookieVal(j); ");
        setWrite("				i = document.cookie.indexOf(\" \", i) + 1; ");
        setWrite("				if (i == 0) break; ");
        setWrite("			} ");
        setWrite("			return null; ");
        setWrite("		} ");
        setWrite(" ");
        setWrite("		function getCookieVal(offset) { ");
        setWrite("			var endstr = document.cookie.indexOf (\";\", offset); ");
        setWrite("			if (endstr == -1) ");
        setWrite("			endstr = document.cookie.length; ");
        setWrite("			return unescape(document.cookie.substring(offset, endstr)); ");
        setWrite("		} ");
        setWrite(" ");
        setWrite("		function SetCookie(name, value)  ");
        setWrite("		{	 ");
        setWrite("			var argv = SetCookie.arguments; ");
        setWrite("			var argc = SetCookie.arguments.length; ");
        setWrite("			var expires = (argc > 2) ? argv[2] : null; ");
        setWrite("			var domain = (argc > 4) ? argv[4] : null; ");
        setWrite("			var secure = (argc > 5) ? argv[5] : false; ");
        setWrite("			var path = \"/\"; ");
        setWrite("			name = CookieBranding(name) ");
        setWrite("			document.cookie = name + \"=\" + escape (value) + ");
        setWrite("			((expires == null) ? \"\" : (\"; expires=\" + expires.toGMTString())) + ");
        setWrite("			((path == null) ? \"\" : (\"; path=\" + path)) + ");
        setWrite("			((domain == null) ? \"\" : (\"; domain=\" + domain)) + ");
        setWrite("			((secure == true) ? \"; secure\" : \"\"); ");
        setWrite("		} ");
        setWrite(" ");
        setWrite("		var USETEXTLINKS = 1 ");
        setWrite("		var STARTALLOPEN = 0 ");
        setWrite("		var USEFRAMES = 1 ");
        setWrite("		var USEICONS = 1 ");
        setWrite("		var WRAPTEXT = 0 ");
        setWrite("		var PERSERVESTATE = 0 ");
        setWrite("		var ICONPATH = '../images/tree/' ");
        setWrite("		var HIGHLIGHT = 0 ");
        setWrite("		var HIGHLIGHT_COLOR = 'white'; ");
        setWrite("		var HIGHLIGHT_BG	= 'blue'; ");
        setWrite("		var BUILDALL = 0 ");
        setWrite("		var lastClicked = null; ");
        setWrite("		var lastClickedColor; ");
        setWrite("		var lastClickedBgColor; ");
        setWrite("		var indexOfEntries = new Array ");
        setWrite("		var nEntries = 0 ");
        setWrite("		var browserVersion = 0 ");
        setWrite("		var selectedFolder=0 ");
        setWrite("		var lastOpenedFolder=null ");
        setWrite("		//var t=5 ");
        setWrite("		var doc = document ");
        setWrite("		var supportsDeferral = false ");
        setWrite("		var cookieCutter = '^' ");
        setWrite("		doc.yPos = 0 ");
        setWrite(" ");
        setWrite("		function initializeDocument() ");
        setWrite("		{ ");
        setWrite("			preLoadIcons(); ");
        setWrite("			switch(navigator.family) ");
        setWrite("			{ ");
        setWrite("				case 'ie4': ");
        setWrite("					browserVersion = 1 ");
        setWrite("					break; ");
        setWrite("				case 'opera': ");
        setWrite("					browserVersion = (navigator.version > 6 ? 1 : 0); ");
        setWrite("					break; ");
        setWrite("				case 'nn4': ");
        setWrite("					browserVersion = 2 ");
        setWrite("					break; ");
        setWrite("				case 'gecko': ");
        setWrite("					browserVersion = 3 ");
        setWrite("					break; ");
        setWrite("				case 'safari': ");
        setWrite("					browserVersion = 1 ");
        setWrite("					break; ");
        setWrite("				default: ");
        setWrite("					browserVersion = 0 ");
        setWrite("					break; ");
        setWrite("			} ");
        setWrite("			supportsDeferral = ((navigator.family=='ie4' && navigator.version >= 5 && navigator.OS != \"mac\") || browserVersion == 3); ");
        setWrite("			supportsDeferral = supportsDeferral & (!BUILDALL) ");
        setWrite("			if (!USEFRAMES && browserVersion == 2) ");
        setWrite("				browserVersion = 0; ");
        setWrite("			if (PERSERVESTATE && GetCookie(\"clickedFolder\") != null) ");
        setWrite("				STARTALLOPEN = 0 ");
        setWrite("			foldersTree.initialize(0, true, \"\") ");
        setWrite("			if (supportsDeferral && !STARTALLOPEN) ");
        setWrite("				foldersTree.renderOb(null) ");
        setWrite("			else { ");
        setWrite("				renderAllTree(foldersTree, null); ");
        setWrite("				if (PERSERVESTATE && STARTALLOPEN) ");
        setWrite("					storeAllNodesInClickCookie(foldersTree) ");
        setWrite("				if (browserVersion == 2) ");
        setWrite("					doc.write(\"<layer top=\" + indexOfEntries[nEntries-1].navObj.top + \">&nbsp;</layer>\") ");
        setWrite("				if (browserVersion != 0 && !STARTALLOPEN) ");
        setWrite("					hideWholeTree(foldersTree, false, 0) ");
        setWrite("			} ");
        setWrite("			setInitialLayout() ");
        setWrite("			if (PERSERVESTATE && GetCookie('highlightedTreeviewLink')!=null	&& GetCookie('highlightedTreeviewLink')!=\"\") { ");
        setWrite("				var nodeObj = findObj(GetCookie('highlightedTreeviewLink')) ");
        setWrite("				if (nodeObj!=null) { ");
        setWrite("					nodeObj.forceOpeningOfAncestorFolders() ");
        setWrite("					highlightObjLink(nodeObj); ");
        setWrite("				} ");
        setWrite("				else ");
        setWrite("					SetCookie('highlightedTreeviewLink', '') ");
        setWrite("			} ");
        setWrite("		} ");
        setWrite("		foldersTree = gFld(\"전국망\")");
    }

    public static void main(String[] args) {
        try {
            FileWriterTest fwt = new FileWriterTest();
            
            fwt.setWrite( "ggggggggggggggg");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
